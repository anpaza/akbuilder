Fix erroneous 'const' modifiers in ppmgr driver.
Older gccs would ignore it, newer treat as errors.

Also 'platform_type' is replaced by 'get_platform_type()' as the
variable is not directly accessible from ppmgr_vpp.c

diff -ur original/drivers/amlogic/media/video_processor/ppmgr/ppmgr_drv.c modified/drivers/amlogic/media/video_processor/ppmgr/ppmgr_drv.c
--- original/drivers/amlogic/media/video_processor/ppmgr/ppmgr_drv.c	2018-09-21 07:30:58.000000000 +0300
+++ modified/drivers/amlogic/media/video_processor/ppmgr/ppmgr_drv.c	2018-12-16 13:52:52.149444204 +0300
@@ -828,7 +828,7 @@
 static ssize_t viewmode_read(
 	struct class *cla, struct class_attribute *attr, char *buf)
 {
-	const char *viewmode_str[] const = {
+	const char *viewmode_str[] = {
 		"normal", "full", "4:3", "16:9", "1:1"};
 	return snprintf(buf, 80, "current view mode is %d:%s\n",
 			ppmgr_device.viewmode,
@@ -857,7 +857,7 @@
 static ssize_t doublemode_read(
 	struct class *cla, struct class_attribute *attr, char *buf)
 {
-	const char *doublemode_str[] const = {
+	const char *doublemode_str[] = {
 		"normal", "horizontal double", "vertical double"};
 	unsigned int mode = get_ppmgr_3dmode();
 
@@ -894,7 +894,7 @@
 static ssize_t switchmode_read(
 	struct class *cla, struct class_attribute *attr, char *buf)
 {
-	const char *switchmode_str[] const = {"disable", "enable"};
+	const char *switchmode_str[] = {"disable", "enable"};
 	unsigned int mode = get_ppmgr_3dmode();
 	unsigned int flag = (mode & PPMGR_3D_PROCESS_SWITCH_FLAG) ? 1 : 0;
 
@@ -930,7 +930,7 @@
 static ssize_t direction_3d_read(
 	struct class *cla, struct class_attribute *attr, char *buf)
 {
-	const char *direction_str[] const = {
+	const char *direction_str[] = {
 		"0 degree", "90 degree", "180 degree", "270 degree"};
 /*unsigned mode = get_ppmgr_3dmode();*/
 /* mode = ((mode & PPMGR_3D_PROCESS_3D_ROTATE_DIRECTION_MASK)
@@ -973,7 +973,7 @@
 static ssize_t scale_down_read(
 	struct class *cla, struct class_attribute *attr, char *buf)
 {
-	const char *value_str[] const = {"noraml", "div 2", "div 3", "div 4"};
+	const char *value_str[] = {"noraml", "div 2", "div 3", "div 4"};
 	unsigned int mode = ppmgr_device.scale_down;
 
 	return snprintf(buf, 80, "current scale down value is %d:%s\n",
diff -ur original/drivers/amlogic/media/video_processor/ppmgr/ppmgr_vpp.c modified/drivers/amlogic/media/video_processor/ppmgr/ppmgr_vpp.c
--- original/drivers/amlogic/media/video_processor/ppmgr/ppmgr_vpp.c	2018-09-21 07:30:58.000000000 +0300
+++ modified/drivers/amlogic/media/video_processor/ppmgr/ppmgr_vpp.c	2018-12-24 01:24:18.754573290 +0300
@@ -1567,9 +1567,6 @@
 	int ret = 0;
 	unsigned int cur_angle = 0;
 	int pic_struct = 0, interlace_mode;
-#ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_3D_PROCESS
-	enum platform_type_t platform_type;
-#endif
 #ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_PPSCALER
 	int i;
 	u32 mode = 0;
@@ -1642,8 +1639,7 @@
 		return;
 	}
 #ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_3D_PROCESS
-	platform_type = get_platform_type();
-	if (platform_type == PLATFORM_TV)
+	if (get_platform_type() == PLATFORM_TV)
 		ret = ppmgr_buffer_init(1);
 	else
 		ret = ppmgr_buffer_init(0);
@@ -2173,7 +2169,7 @@
 	unsigned int cur_angle = 0;
 	int ret = 0;
 #ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_3D_PROCESS
-	if (platform_type == PLATFORM_TV)
+	if (get_platform_type() == PLATFORM_TV)
 		ret = ppmgr_buffer_init(1);
 	else
 		ret = ppmgr_buffer_init(0);
@@ -2408,7 +2404,7 @@
 			&ratio);
 	unsigned int cur_angle = pp_vf->angle;
 #ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_3D_PROCESS
-	if (platform_type == PLATFORM_TV)
+	if (get_platform_type() == PLATFORM_TV)
 		ret = ppmgr_buffer_init(1);
 	else
 		ret = ppmgr_buffer_init(0);
@@ -2822,7 +2818,6 @@
 				&& (!ppmgr_blocking)) {
 #ifdef CONFIG_AMLOGIC_POST_PROCESS_MANAGER_3D_PROCESS
 			int process_type = TYPE_NONE;
-			enum platform_type_t platform_type;
 
 			vf = ppmgr_vf_get_dec();
 			if (!vf)
@@ -2867,8 +2862,7 @@
 					+ ppmgr_device.orientation
 					+ vf->orientation)%4;
 
-			platform_type = get_platform_type();
-			if (platform_type == PLATFORM_TV)
+			if (get_platform_type() == PLATFORM_TV)
 				process_type = get_tv_process_type(vf);
 			else
 				process_type = get_mid_process_type(vf);
@@ -2876,7 +2870,7 @@
 			if (process_type == TYPE_NONE) {
 				int ret = 0;
 
-				if (platform_type != PLATFORM_TV)
+				if (get_platform_type() != PLATFORM_TV)
 					ret = process_vf_deinterlace(vf,
 							context,
 							&ge2d_config);
@@ -2887,7 +2881,7 @@
 						(ret > 0)?ret:0);
 
 			} else {
-				if (platform_type == PLATFORM_TV)
+				if (get_platform_type() == PLATFORM_TV)
 					ppmgr_vf_3d_tv(vf,
 							context, &ge2d_config);
 				else
@@ -3544,10 +3538,6 @@
 
 int start_ppmgr_task(void)
 {
-	enum platform_type_t platform_type;
-
-	platform_type = get_platform_type();
-
 	/*    if (get_cpu_type()>= MESON_CPU_TYPE_MESON6)*/
 	/*	    switch_mod_gate_by_name("ge2d", 1);*/
 	/*#endif*/
